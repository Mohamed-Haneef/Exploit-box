import socket as sock
import select as sel
import sys

host_ip = '0.0.0.0'
host_port = 4444
connected_clients = []
RECEIVE_BUFFER = 1024

def chat_server():
    server_socket = sock.socket(sock.AF_INET, sock.SOCK_STREAM)
    server_socket.setsockopt(sock.SOL_SOCKET, sock.SO_REUSEADDR, 1)
    server_socket.bind((host_ip, host_port))
    server_socket.listen()
    server_socket.setblocking(0)
    connected_clients.append(server_socket)

    print(f"Chat server started, Listening on ip {host_ip} on port {host_port}")

    while True:
        ready_read, _, _ = sel.select(connected_clients, [], [])

        for sock_list in ready_read:
            if sock_list == server_socket:
                client_socket, addr = server_socket.accept()
                client_socket.setblocking(0)
                connected_clients.append(client_socket)
                print(f"Client {addr[0]}:{addr[1]} connected.")
                broadcast(server_socket, client_socket, f"Client {addr[0]}:{addr[1]} entered the chat room.\n")
            else:
                try:
                    data = sock_list.recv(RECEIVE_BUFFER)
                    if data:
                        data_decoded = data.decode().strip()
                        addr = sock_list.getpeername()
                        print(f"Received data from {addr[0]}:{addr[1]}: {data_decoded}")
                        broadcast(server_socket, sock_list, f"{addr[0]}:{addr[1]}: {data_decoded}\n")
                    else:
                        addr = sock_list.getpeername()
                        print(f"Client {addr[0]}:{addr[1]} disconnected.")
                        if sock_list in connected_clients:
                            connected_clients.remove(sock_list)
                        sock_list.close()
                        broadcast(server_socket, sock_list, f"Client {addr[0]}:{addr[1]} is offline.\n")
                except Exception as e:
                    addr = sock_list.getpeername()
                    print(f"Error: {e}")
                    print(f"Client {addr[0]}:{addr[1]} is offline.")
                    if sock_list in connected_clients:
                        connected_clients.remove(sock_list)
                    sock_list.close()
                    broadcast(server_socket, sock_list, f"Client {addr[0]}:{addr[1]} is offline.\n")

def broadcast(server_socket, client_sock, message):
    for socket in connected_clients:
        if socket != server_socket and socket != client_sock:
            try:
                socket.send(message.encode())
            except Exception as e:
                print(f"Failed to send message to {socket.getpeername()}: {e}")
                socket.close()
                if socket in connected_clients:
                    connected_clients.remove(socket)

if __name__ == "__main__":
    try:
        chat_server()
    except KeyboardInterrupt:
        print("Chat server stopped.")
        sys.exit(0)
